<Project ToolsVersion="4.0" DefaultTargets="Build" xmlns="http://schemas.microsoft.com/developer/msbuild/2003">
  <PropertyGroup>
    <!-- If this file changes force a rebuild -->
    <MSBuildAllProjects>$(MSBuildAllProjects);$(MSBuildThisFileFullPath)</MSBuildAllProjects>
  </PropertyGroup>

  <UsingTask TaskName="PostTests" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
      <ParameterGroup>
          <ToUrl ParameterType="System.String" Required="true" />
          <TestsXml ParameterType="System.String" Required="true" />
      </ParameterGroup>
      <Task>
          <Reference Include="System.Net" />
          <Reference Include="System.Web.Helpers" />
          <Reference Include="System.Xml" />
          <Reference Include="System.Xml.Linq" />
          <Using Namespace="System.Collections.Generic" />
          <Using Namespace="System.Linq" />
          <Using Namespace="System.Net" />
          <Using Namespace="System.Xml.Linq" />
          <Using Namespace="System.Web.Helpers" />
          <Code Type="Fragment" Language="cs">
              <![CDATA[
  var root = XElement.Parse("<root>" + this.TestsXml + "</root>");
  var testSuites = root.Elements("testsuite");

  var testResults = new List<object>();
  foreach (var testSuite in testSuites)
  {
    var testCases = testSuite.Elements("testcase");

    foreach (var testCase in testCases)
    {
      var testName = testCase.Attribute("name").Value;
      var fileName = testCase.Attribute("classname").Value;
      var outcome = "Passed";
      var durationMilliseconds = Convert.ToInt32(Decimal.Parse(testCase.Attribute("time").Value) * 1000).ToString();
      var ErrorMessage = "";
      var ErrorStackTrace = "";

      var skipped = testCase.Descendants("skipped");
      if (skipped.Any())
      {
        outcome = "Ignored";
      }

      var failure = testCase.Descendants("failure").SingleOrDefault();
      if (failure != null)
      {
        outcome = "Failed";
        var failureValue = failure.Value.Replace("\\r", "\r").Replace("\\n", "\n");
        var stackTraceIndex = failureValue.IndexOf("\r\n");
        if (stackTraceIndex > 0)
        {
          ErrorMessage = failureValue.Substring(0, stackTraceIndex);
          ErrorStackTrace = failureValue.Substring(stackTraceIndex + 2, failureValue.Length - stackTraceIndex - 2);
        }
      }

      var testResult = new {
        testName = testName,
        testFramework = "Mocha",
        fileName = fileName,
        outcome = outcome,
        durationMilliseconds = durationMilliseconds,
        ErrorMessage = ErrorMessage,
        ErrorStackTrace = ErrorStackTrace,
        StdOut = "",
        StdErr = ""
      };

      testResults.Add(testResult);
    }
  }

  var json = Json.Encode(testResults);

  Log.LogMessage("Sending: " + json);
  Log.LogMessage("To: " + this.ToUrl);
  
  var httpWebRequest = (HttpWebRequest)WebRequest.Create(this.ToUrl);
  httpWebRequest.ContentType = "text/json";
  httpWebRequest.Method = "POST";

  using (var streamWriter = new StreamWriter(httpWebRequest.GetRequestStream()))
  {
    streamWriter.Write(json);
    streamWriter.Flush();
  }
  
  var httpResponse = (HttpWebResponse)httpWebRequest.GetResponse();
  using (var streamReader = new StreamReader(httpResponse.GetResponseStream()))
  {
    var result = streamReader.ReadToEnd();
    Log.LogMessage(result.ToString());
  }
  ]]>
          </Code>
      </Task>
  </UsingTask>

  <Target Name="SetRunJavaScriptTests">
    <PropertyGroup>
      <RunJavaScriptTests>true</RunJavaScriptTests>
    </PropertyGroup>
  </Target>

  <Target Name="InstallNodePackages" Inputs="$(MSBuildThisFileDirectory)package.json" Outputs="$(MSBuildThisFileDirectory)node_modules_writes.txt">
    <Exec
      Command="npm install"
      WorkingDirectory="$(MSBuildThisFileDirectory)"
      Condition="'$(RunJavaScriptTests)'=='true'"
      LogStandardErrorAsError="false"
      StdOutEncoding="UTF-8" />

    <ItemGroup>
      <_InstalledNodeFiles Include="$(MSBuildThisFileDirectory)node_modules\**\*" />
    </ItemGroup>

    <WriteLinesToFile
      File="$(MSBuildThisFileDirectory)node_modules_writes.txt"
      Lines="@(_InstalledNodeFiles)"
      Overwrite="true"
      Encoding="Unicode" />
  </Target>

  <Target Name="PrepareJavaScriptTests" DependsOnTargets="InstallNodePackages">
    <ItemGroup>
      <_AllProjectJavaScriptFiles Include="$(MSBuildProjectDirectory)\**\*.js" />
    </ItemGroup>

    <PropertyGroup>
      <MochaResultsFilePath Condition="'$(MochaResultsFilePath)' == ''">$(MSBuildProjectDirectory)\JavaScriptTests.xunit</MochaResultsFilePath>
    </PropertyGroup>
  </Target>

  <Target Name="ExecuteJavaScriptTests" DependsOnTargets="PrepareJavaScriptTests" Inputs="$(MSBuildThisFileDirectory)node_modules_writes.txt;@(JavaScriptTestsHost);@(_AllProjectJavaScriptFiles)" Outputs="$(MochaResultsFilePath)" Condition="'$(RunJavaScriptTests)'=='true' and '@(JavaScriptTestsHost)' != ''">
    <PropertyGroup>
      <_JavaScriptTestHost>%(JavaScriptTestsHost.FullPath)</_JavaScriptTestHost>
      <_JavaScriptTestHost>$([MSBuild]::MakeRelative($(MSBuildThisFileDirectory), $(_JavaScriptTestHost)))</_JavaScriptTestHost>
    </PropertyGroup>

    <Exec
      Command="node .\node_modules\mocha-phantomjs\bin\mocha-phantomjs -R xunit $(_JavaScriptTestHost)"
      WorkingDirectory="$(MSBuildThisFileDirectory)"
      IgnoreExitCode="true"
      StdOutEncoding="UTF-8"
      ConsoleToMSBuild="true">
      <Output TaskParameter="ConsoleOutput" ItemName="_ConsoleOutput" />
      <Output TaskParameter="ExitCode" PropertyName="_ExitCode" />
    </Exec>

    <PropertyGroup>
      <_ConsoleOutput>@(_ConsoleOutput->'%(Identity)', '\r\n')</_ConsoleOutput>
    </PropertyGroup>

    <WriteLinesToFile
      File="$(MochaResultsFilePath)"
      Lines="$(_ConsoleOutput)"
      Overwrite="true"
      Encoding="UTF-8"
      Condition="'$(_ExitCode)' == '0'" />

    <PostTests
      ToUrl="$(APPVEYOR_API_URL)api/tests/batch"
      TestsXml="$(_ConsoleOutput)"
      Condition="'$(APPVEYOR_API_URL)' != ''" />

    <Error Condition="'$(_ExitCode)' != '0'" Text="JavaScript test failure." />
  </Target>

  <!-- User runs build with /t:RunJavaScriptTests - force running by calling Set first -->
  <Target Name="RunJavaScriptTests" DependsOnTargets="SetRunJavaScriptTests;ExecuteJavaScriptTests">
  </Target>

  <PropertyGroup>
    <BuildDependsOn>
      $(BuildDependsOn);
      JavaScriptTestsBuild
    </BuildDependsOn>
  </PropertyGroup>

  <!-- User runs build with /p:RunJavaScriptTests=true -->
  <Target Name="JavaScriptTestsBuild" DependsOnTargets="ExecuteJavaScriptTests">
  </Target>
</Project>